module-type: widget
title: $:/tdq/widgets/browsewiki.js
type: application/javascript

/*\
title: $:/tdq/widgets/browsewiki.js
type: application/javascript
module-type: widget

Browse widget for browsing wiki files to open

\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

var Widget = require("$:/core/modules/widgets/widget.js").widget;

var BrowseWidget = function(parseTreeNode,options) {
	this.initialise(parseTreeNode,options);
};

/*
Inherit from the base widget class
*/
BrowseWidget.prototype = new Widget();

/*
Render this widget into the DOM
*/
BrowseWidget.prototype.render = function(parent,nextSibling) {
	var self = this;
	// Remember parent
	this.parentDomNode = parent;
	// Compute attributes and execute state
	this.computeAttributes();
	this.execute();
	// Create element
	var domNode = this.document.createElement("input");
	domNode.setAttribute("type","file");
	if(this.browseMultiple) {
		domNode.setAttribute("multiple","multiple");
	}
	// Add a click event handler
	domNode.addEventListener("change",function (event) {
		self.dispatchEvent({type: "dm-open-wiki-file", param: event.target.files,});
		return false;
	},false);
	// Insert element
	parent.insertBefore(domNode,nextSibling);
	this.renderChildren(domNode,null);
	this.domNodes.push(domNode);
};

/*
Compute the internal state of the widget
*/
BrowseWidget.prototype.execute = function() {
	this.browseMultiple = this.getAttribute("multiple");
};

/*
Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering
*/
BrowseWidget.prototype.refresh = function(changedTiddlers) {
	return false;
};

exports.browsewiki = BrowseWidget;

})();
